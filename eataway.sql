/*CONECTADO A SQL PLUS*/

CONNECT / AS SYSDBA

ALTER SESSION SET "_ORACLE_SCRIPT"=true;

-- CREACIÓN DEL USUARIO
CREATE USER C##eataway IDENTIFIED BY sws2024;

-- ASIGNACIÓN DE PRIVILEGIOS AL USUARIO
GRANT CONNECT TO C##eataway;

GRANT ALL PRIVILEGES TO C##eataway;

-----------------------------------------------
--CREACION DE LAS TABLAS--
-------------------------------------------------

-- Tabla Categoría
CREATE TABLE Categoria (
    id_categoria NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo VARCHAR2(50) NOT NULL
);

-- Tabla Usuarios
CREATE TABLE Usuarios (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL,
    nombre VARCHAR2(50) NOT NULL,
    primer_apellido VARCHAR2(50) NOT NULL,
    segundo_apellido VARCHAR2(50),
    correo VARCHAR2(100) NOT NULL UNIQUE,
    password varchar(200) NOT NULL,
    foto VARCHAR2(1024)
);
ALTER TABLE Usuarios
MODIFY foto VARCHAR2(1024);

-- Tabla Locales
CREATE TABLE Locales (
    id_local NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    id_categoria NUMBER,  -- Relación con Categoría
    descripcion CLOB,
    FOREIGN KEY (id_categoria) REFERENCES Categoria(id_categoria)
);

-- Tabla Contactos
CREATE TABLE Contactos (
    id_contacto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_local NUMBER,  -- Relación con Locales
    telefono VARCHAR2(20),
    email VARCHAR2(100),
    instagram VARCHAR2(100),
    FOREIGN KEY (id_local) REFERENCES Locales(id_local)
);

-- Tabla Reservas
CREATE TABLE Reservas (
    id_reserva NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER,  -- Relación con Usuarios
    id_local NUMBER,  -- Relación con Locales
    fecha DATE NOT NULL,
    hora VARCHAR2(10) NOT NULL,
    numero_personas NUMBER NOT NULL,
    descripcion VARCHAR2(200),
    FOREIGN KEY (id_usuario) REFERENCES Usuarios(id_usuario),
    FOREIGN KEY (id_local) REFERENCES Locales(id_local)
);

-- Tabla Reseñas
CREATE TABLE Resenas (
    id_resena NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER,  -- Relación con Usuarios
    id_local NUMBER,  -- Relación con Locales
    calificacion NUMBER CHECK (calificacion BETWEEN 1 AND 5),
    comentario VARCHAR2(200),
    FOREIGN KEY (id_usuario) REFERENCES Usuarios(id_usuario),
    FOREIGN KEY (id_local) REFERENCES Locales(id_local)
);

-- Tabla Fotos
CREATE TABLE Fotos (
    id_foto NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_local NUMBER NOT NULL,  -- Relación con Locales
    ruta_foto VARCHAR2(255) NOT NULL,
    FOREIGN KEY (id_local) REFERENCES Locales(id_local),
    UNIQUE (id_local, id_foto)  -- Asegura combinaciones únicas de local y foto
);

-- Tabla Eventos Especiales
CREATE TABLE EventosEspeciales (
    id_evento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_local NUMBER,  -- Relación con Locales
    nombre_evento VARCHAR2(100) NOT NULL,
    descripcion CLOB,
    fecha_evento DATE NOT NULL,
    hora_evento TIMESTAMP(0) NOT NULL,
    FOREIGN KEY (id_local) REFERENCES Locales(id_local)
);

-- Tabla Promociones
CREATE TABLE Promociones (
    id_promocion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_local NUMBER,  -- Relación con Locales
    nombre VARCHAR2(100) NOT NULL,
    descripcion CLOB,
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado VARCHAR2(50) DEFAULT 'Activa', -- Puede ser 'Activa', 'Expirada'
    FOREIGN KEY (id_local) REFERENCES Locales(id_local)
);

-- Tabla Ubicación
CREATE TABLE Ubicacion (
    id_ubicacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_local NUMBER NOT NULL,  -- Relación con Locales
    provincia VARCHAR2(50) NOT NULL,
    direccion VARCHAR2(255) NOT NULL,
    FOREIGN KEY (id_local) REFERENCES Locales(id_local),
    UNIQUE (id_local, id_ubicacion)  -- Asegura combinaciones únicas de local y ubicación
);

---------------------------------------------------
--INSERTs PARA PRUEBAS--
---------------------------------------------------

-- Insertar en Categoría
INSERT INTO Categoria (tipo) VALUES ('Restaurante');
INSERT INTO Categoria (tipo) VALUES ('Bar');

-- Insertar en Usuarios
INSERT INTO Usuarios (username, nombre, primer_apellido, segundo_apellido, correo, password, foto) VALUES ('weny', 'Wendy', 'Badilla', 'Carvajal', 'wendybadilla40@gmail.com', '123', 'https://www.myoutfie.com/historias/wp-content/uploads/2019/10/ropa-mujer-casual-1.jpg');
INSERT INTO Usuarios (username, nombre, primer_apellido, segundo_apellido, correo, password, foto) VALUES ('ste', 'Steven', 'Chacon', 'Camacho', 'stchch06@gmail.com', '123', 'https://faraisnake.com/wp-content/uploads/2024/01/image-36-820x1024.png');

-- Insertar en Locales
INSERT INTO Locales (nombre, id_categoria, descripcion) VALUES ('Zuntra', 2, 'Un pedacito de jungla de playa en Bº Escalante');
INSERT INTO Locales (nombre, id_categoria, descripcion) VALUES ('Ahumaditos', 1, 'La mejor calidad en platillos ahumados y a la parrilla');

-- Insertar en Contactos
INSERT INTO Contactos (id_local, telefono, email, instagram) VALUES (1, '70856984', 'zuntra@gmail.com', '@zuntracr');
INSERT INTO Contactos (id_local, telefono, email, instagram) VALUES (2, '71799808', 'ahumado@gmail.com', '@ahumadictoscr');

-- Insertar en Reservas
INSERT INTO Reservas (id_usuario, id_local, fecha, hora, numero_personas, descripcion) VALUES (1, 1, TO_DATE('2024-07-18', 'YYYY-MM-DD'), '05:00 pm', 4, 'Reserva para 4 personas');
INSERT INTO Reservas (id_usuario, id_local, fecha, hora, numero_personas, descripcion) VALUES (2, 2, TO_DATE('2024-07-19', 'YYYY-MM-DD'), '06:00 pm', 2, 'Reserva para 2 personas');

-- Insertar en Reseñas
INSERT INTO Resenas (id_usuario, id_local, calificacion, comentario) VALUES (1, 1, 5, 'Excelente servicio');
INSERT INTO Resenas (id_usuario, id_local, calificacion, comentario) VALUES (2, 2, 4, 'Muy buen lugar');

-- Insertar en Fotos
INSERT INTO Fotos (id_local, ruta_foto) VALUES (1, 'https://lh3.googleusercontent.com/p/AF1QipMrcbuz-ccUfjUWJtJ7Q545RtCdDSiiDPLgKcqk=s1360-w1360-h1020');
INSERT INTO Fotos (id_local, ruta_foto) VALUES (2, 'https://lh3.googleusercontent.com/p/AF1QipPR6U9O6l9P8Xo7vSs6n4ObgAllehEnVWyKxgQt=s1360-w1360-h1020');
INSERT INTO Fotos (id_local, ruta_foto) VALUES (2, 'https://jbarrelsmoker.com/cdn/shop/files/86bde1e6-f8da-4fcf-abb3-ea47b9176384_001af96c-c203-44b9-8693-c84b00539644.jpg?v=1715355189&width=1445');

-- Insertar en Eventos Especiales
INSERT INTO EventosEspeciales (id_local, nombre_evento, descripcion, fecha_evento, hora_evento) VALUES (1, 'Festival de Música Primavera', 'Únete a nosotros para una celebración vibrante de la música durante nuestro Festival de Música Primavera. Disfruta de actuaciones en vivo de bandas locales y artistas internacionales mientras te sumerges en un ambiente festivo con comida deliciosa y actividades para toda la familia.', TO_DATE('2024-07-20', 'YYYY-MM-DD'), TO_TIMESTAMP('20-07-2024 18:00:00', 'DD-MM-YYYY HH24:MI:SS'));
INSERT INTO EventosEspeciales (id_local, nombre_evento, descripcion, fecha_evento, hora_evento) VALUES (2, 'Noche de Cocteles y Jazz', 'Ven a disfrutar de una noche elegante con nuestra Noche de Cocteles y Jazz. Degusta una selección exclusiva de cocteles artesanales preparados por nuestros expertos mixólogos mientras te relajas con música jazz en vivo. Un ambiente sofisticado y relajante para una velada inolvidable.', TO_DATE('2024-07-21', 'YYYY-MM-DD'), TO_TIMESTAMP('21-07-2024 19:00:00', 'DD-MM-YYYY HH24:MI:SS'));

-- Insertar en Promociones
INSERT INTO Promociones (id_local, nombre, descripcion, fecha_inicio, fecha_fin, estado) VALUES (1, 'Happy Hour', '2x1 en cocteles', TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-31', 'YYYY-MM-DD'), 'Activa');
INSERT INTO Promociones (id_local, nombre, descripcion, fecha_inicio, fecha_fin, estado) VALUES (2, '10% Descuento', '10% de descuento al pagar con BN Tarjetas', TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2024-07-15', 'YYYY-MM-DD'), 'Expirada');

-- Insertar en Ubicación
INSERT INTO Ubicacion (id_local, provincia, direccion) VALUES (1, 'San José', 'Av. 7, Barrio Escalante');
INSERT INTO Ubicacion (id_local, provincia, direccion) VALUES (2, 'Cartago', 'Centro en Cartago, 300 Metros al Sur, 100 Metros al Este, Del McDonald´s');
INSERT INTO Ubicacion (id_local, provincia, direccion) VALUES (2, 'Alajuela', '1500 metros de la iglesia católica del barrio San José');

-----------------------------------

SELECT * FROM Ubicacion;
SELECT * FROM Categoria;
SELECT * FROM Usuarios;
SELECT * FROM Locales;
SELECT * FROM Contactos;
SELECT * FROM Reservas;
SELECT * FROM Resenas;
SELECT * FROM Fotos;
SELECT * FROM EventosEspeciales;
SELECT * FROM Promociones;

-------------------------------------

DROP TABLE Contactos CASCADE CONSTRAINTS;
DROP TABLE Reservas CASCADE CONSTRAINTS;
DROP TABLE Resenas CASCADE CONSTRAINTS;
DROP TABLE Fotos CASCADE CONSTRAINTS;
DROP TABLE EventosEspeciales CASCADE CONSTRAINTS;
DROP TABLE Promociones CASCADE CONSTRAINTS;
DROP TABLE Locales CASCADE CONSTRAINTS;
DROP TABLE Categoria CASCADE CONSTRAINTS;
DROP TABLE Usuarios CASCADE CONSTRAINTS;
DROP TABLE Ubicacion CASCADE CONSTRAINTS;


---------------------------------------------------
--PROCEDIMEINTOS ALMACENADOS--
---------------------------------------------------

-- SP para obtener todos los locales
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerLocalesSP(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_cursor FOR
    SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
           c.tipo AS tipo, 
           (SELECT ruta_foto FROM C##eataway.Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto
    FROM C##eataway.Locales l
    LEFT JOIN C##eataway.Categoria c ON l.id_categoria = c.id_categoria;
END;

-- SP para obtener un local por ID
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerLocalPorID(
  p_id_local IN C##eataway.Locales.id_local%TYPE,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
           c.tipo AS tipo, 
           (SELECT ruta_foto FROM C##eataway.Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto,
           co.telefono, co.email, co.instagram
    FROM C##eataway.Locales l
    LEFT JOIN C##eataway.Categoria c ON l.id_categoria = c.id_categoria
    LEFT JOIN C##eataway.Contactos co ON l.id_local = co.id_local
    WHERE l.id_local = p_id_local;
END;

-- SP para obtener eventos especiales
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerEventosEspecialesSP(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_cursor FOR
    SELECT e.id_evento, e.nombre_evento, e.descripcion, e.fecha_evento, e.hora_evento, 
           l.nombre AS nombre_local
    FROM C##eataway.EventosEspeciales e
    LEFT JOIN C##eataway.Locales l ON e.id_local = l.id_local;
END;

-- SP para obtener todas las reseñas de un local específico con nombre completo de usuario y foto de usuario
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerResenasPorLocalSP(
    p_id_local IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT r.id_resena, r.id_local, r.calificacion, r.comentario,
           u.nombre || ' ' || u.primer_apellido || ' ' || u.segundo_apellido AS nombre_completo,
           u.username AS nombre_usuario,
           u.foto AS foto_usuario
    FROM C##eataway.Resenas r
    LEFT JOIN C##eataway.Usuarios u ON r.id_usuario = u.id_usuario
    WHERE r.id_local = p_id_local;
END;

-- SP para insertar una reseña
CREATE OR REPLACE PROCEDURE C##eataway.InsertarResenaSP(
    p_id_usuario IN C##eataway.Resenas.id_usuario%TYPE,
    p_id_local IN C##eataway.Resenas.id_local%TYPE,
    p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
    p_comentario IN C##eataway.Resenas.comentario%TYPE
) AS
BEGIN
    INSERT INTO C##eataway.Resenas (id_usuario, id_local, calificacion, comentario)
    VALUES (p_id_usuario, p_id_local, p_calificacion, p_comentario);
END;

-- SP para insertar una reserva
CREATE OR REPLACE PROCEDURE C##eataway.InsertarReservaSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_id_local IN C##eataway.Reservas.id_local%TYPE,
    p_fecha IN C##eataway.Reservas.fecha%TYPE,
    p_hora IN C##eataway.Reservas.hora%TYPE,
    p_numero_personas IN C##eataway.Reservas.numero_personas%TYPE,
    p_descripcion IN C##eataway.Reservas.descripcion%TYPE
) AS
BEGIN
    INSERT INTO C##eataway.Reservas (id_usuario, id_local, fecha, hora, numero_personas, descripcion)
    VALUES (p_id_usuario, p_id_local, p_fecha, p_hora, p_numero_personas, p_descripcion);
END;

-- SP para obtener las reservas por id usuario
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerReservasPorUsuarioSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT r.id_reserva, r.id_usuario, r.id_local, r.fecha, r.hora, r.numero_personas, r.descripcion,
               l.nombre AS nombre_local
        FROM C##eataway.Reservas r
        LEFT JOIN C##eataway.Locales l ON r.id_local = l.id_local
        WHERE r.id_usuario = p_id_usuario;
END;

-- SP para eliminar una reserva
CREATE OR REPLACE PROCEDURE C##eataway.EliminarReservaSP(
    p_id_reserva IN NUMBER
) AS
BEGIN
    DELETE FROM C##eataway.Reservas
    WHERE id_reserva = p_id_reserva;
    COMMIT;
END;

--SP para recuperar todas las ubicaciones asociadas a un local específico
CREATE OR REPLACE PROCEDURE ObtenerUbicacionesPorLocalSP(
    p_id_local IN Ubicacion.id_local%TYPE,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT id_ubicacion, id_local, provincia, direccion
        FROM Ubicacion
        WHERE id_local = p_id_local;
END ObtenerUbicacionesPorLocalSP;

--SP para Obtener Fotos por local
CREATE OR REPLACE PROCEDURE ObtenerFotosPorLocalSP(
    p_id_local IN Fotos.id_local%TYPE,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
    SELECT id_foto, id_local, ruta_foto
    FROM Fotos
    WHERE id_local = p_id_local;
END ObtenerFotosPorLocalSP;

--SP para obtener los locales por tipo de local
CREATE OR REPLACE PROCEDURE ObtenerLocalesPorTipo(
  p_tipo_establecimiento IN Categoria.tipo%TYPE,
  p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
  OPEN p_cursor FOR
    SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
           c.tipo AS tipo, 
           (SELECT ruta_foto FROM C##eataway.Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto,
           co.telefono, co.email, co.instagram
    FROM C##eataway.Locales l
    LEFT JOIN C##eataway.Categoria c ON l.id_categoria = c.id_categoria
    LEFT JOIN C##eataway.Contactos co ON l.id_local = co.id_local
    WHERE c.tipo = p_tipo_establecimiento;
END ObtenerLocalesPorTipo;

--SP para obtener las categorias que existen
CREATE OR REPLACE PROCEDURE ObtenerCategoriasSP(p_cursor OUT SYS_REFCURSOR) AS
BEGIN
  OPEN p_cursor FOR
    SELECT id_categoria, tipo
    FROM C##eataway.Categoria;
END;

--SP para obtener la reseñas pos usuario
CREATE OR REPLACE PROCEDURE C##eataway.ObtenerResenasPorUsuarioSP(
    p_id_usuario IN C##eataway.Resenas.id_usuario%TYPE,
    p_cursor OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_cursor FOR
        SELECT r.id_resena, r.id_usuario, r.id_local, r.calificacion, r.comentario,
               l.nombre AS nombre_local
        FROM C##eataway.Resenas r
        LEFT JOIN C##eataway.Locales l ON r.id_local = l.id_local
        WHERE r.id_usuario = p_id_usuario;
END;

-- SP para eliminar una reseña
CREATE OR REPLACE PROCEDURE C##eataway.EliminarResenaSP(
    p_id_resena IN NUMBER
) AS
BEGIN
    DELETE FROM C##eataway.Resenas
    WHERE id_resena = p_id_resena;
    COMMIT;
END;

--SP para actualizar una reseña
CREATE OR REPLACE PROCEDURE C##eataway.ActualizarResenaSP(
    p_id_resena IN C##eataway.Resenas.id_resena%TYPE,
    p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
    p_comentario IN C##eataway.Resenas.comentario%TYPE
) AS
BEGIN
    UPDATE C##eataway.Resenas
    SET calificacion = p_calificacion,
        comentario = p_comentario
    WHERE id_resena = p_id_resena;
END;

--SP para actualizar una reserva
CREATE OR REPLACE PROCEDURE ActualizarReservaSP(
    p_id_reserva IN C##eataway.Reservas.id_reserva%TYPE,
    p_fecha IN C##eataway.Reservas.fecha%TYPE,
    p_hora IN C##eataway.Reservas.hora%TYPE,
    p_numero_personas IN C##eataway.Reservas.numero_personas%TYPE,
    p_descripcion IN C##eataway.Reservas.descripcion%TYPE
) AS
BEGIN
    UPDATE C##eataway.Reservas
    SET fecha = p_fecha,
        hora = p_hora,
        numero_personas = p_numero_personas,
        descripcion = p_descripcion
    WHERE id_reserva = p_id_reserva;
END;

--SP para obtener las reservas por el id
CREATE OR REPLACE PROCEDURE ObtenerReservaPorId(
    p_id_reserva IN Reservas.id_reserva%TYPE,
    cur_reserva OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur_reserva FOR
        SELECT r.id_reserva,
               r.id_usuario,
               r.id_local,
               r.fecha,
               r.hora,
               r.numero_personas,
               r.descripcion,
               l.nombre AS nombre_local  
        FROM Reservas r
        JOIN Locales l ON r.id_local = l.id_local
        WHERE r.id_reserva = p_id_reserva;
END;

--SP obtener promociones activas
CREATE OR REPLACE PROCEDURE ObtenerPromocionesActivasSP(
    cur_promociones OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur_promociones FOR
    SELECT 
        p.id_promocion, p.id_local, p.nombre AS nombre_promocion,
        p.descripcion, p.fecha_inicio, p.fecha_fin, p.estado, l.nombre AS nombre_local,
        (SELECT f.ruta_foto
         FROM Fotos f
         WHERE f.id_local = l.id_local
         AND ROWNUM = 1) AS foto_local
    FROM 
        Promociones p
    JOIN 
        Locales l ON p.id_local = l.id_local
    WHERE 
        p.estado = 'Activa'
    ORDER BY 
        p.fecha_inicio DESC;
END;

--SP obtener promociones expiradas
CREATE OR REPLACE PROCEDURE ObtenerPromocionesExpiradasSP(
    cur_promociones OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cur_promociones FOR
    SELECT 
        p.id_promocion, p.id_local, p.nombre AS nombre_promocion,
        p.descripcion, p.fecha_inicio, p.fecha_fin, p.estado, l.nombre AS nombre_local,
        (SELECT f.ruta_foto
         FROM Fotos f
         WHERE f.id_local = l.id_local
         AND ROWNUM = 1) AS foto_local
    FROM 
        Promociones p
    JOIN 
        Locales l ON p.id_local = l.id_local
    WHERE 
        p.estado = 'Expirada'
    ORDER BY 
        p.fecha_inicio DESC;
END;




---------------------------------------------------
------PAQUETES------
---------------------------------------------------

--*****Paquete para Obtener Locales*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_LOCAL_OBTENER AS
  PROCEDURE ObtenerLocalesSP(p_cursor OUT SYS_REFCURSOR);
  PROCEDURE ObtenerLocalPorID(
    p_id_local IN C##eataway.Locales.id_local%TYPE,
    p_cursor OUT SYS_REFCURSOR
  );
END PCK_EATAWAY_LOCAL_OBTENER;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_LOCAL_OBTENER AS
  PROCEDURE ObtenerLocalesSP(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
             c.tipo AS tipo, 
             (SELECT ruta_foto FROM C##eataway.Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto
      FROM C##eataway.Locales l
      LEFT JOIN C##eataway.Categoria c ON l.id_categoria = c.id_categoria;
  END;

  PROCEDURE ObtenerLocalPorID(
    p_id_local IN C##eataway.Locales.id_local%TYPE,
    p_cursor OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
             c.tipo AS tipo, 
             (SELECT ruta_foto FROM C##eataway.Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto,
             co.telefono, co.email, co.instagram
      FROM C##eataway.Locales l
      LEFT JOIN C##eataway.Categoria c ON l.id_categoria = c.id_categoria
      LEFT JOIN C##eataway.Contactos co ON l.id_local = co.id_local
      WHERE l.id_local = p_id_local;
  END;
END PCK_EATAWAY_LOCAL_OBTENER;

--*****Paquete para Obtener Eventos Especiales*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_EVENTO_OBTENER AS
  PROCEDURE ObtenerEventosEspecialesSP(p_cursor OUT SYS_REFCURSOR);
END PCK_EATAWAY_EVENTO_OBTENER;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_EVENTO_OBTENER AS
  PROCEDURE ObtenerEventosEspecialesSP(p_cursor OUT SYS_REFCURSOR) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT e.id_evento, e.nombre_evento, e.descripcion, e.fecha_evento, e.hora_evento, 
             l.nombre AS nombre_local
      FROM C##eataway.EventosEspeciales e
      LEFT JOIN C##eataway.Locales l ON e.id_local = l.id_local;
  END;
END PCK_EATAWAY_EVENTO_OBTENER;

--*****Paquete para Obtener Reseñas*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESENA_OBTENER AS
  PROCEDURE ObtenerResenasPorLocalSP(
    p_id_local IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
  );
END PCK_EATAWAY_RESENA_OBTENER;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESENA_OBTENER AS
  PROCEDURE ObtenerResenasPorLocalSP(
    p_id_local IN NUMBER,
    p_cursor OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT r.id_resena, r.id_local, r.calificacion, r.comentario,
             u.nombre || ' ' || u.primer_apellido || ' ' || u.segundo_apellido AS nombre_completo,
             u.username AS nombre_usuario,
             u.foto AS foto_usuario
      FROM C##eataway.Resenas r
      LEFT JOIN C##eataway.Usuarios u ON r.id_usuario = u.id_usuario
      WHERE r.id_local = p_id_local;
  END;
END PCK_EATAWAY_RESENA_OBTENER;

--*****Paquete para Insertar Reseñas*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESENA_INSERTAR AS
  PROCEDURE InsertarResenaSP(
    p_id_usuario IN C##eataway.Resenas.id_usuario%TYPE,
    p_id_local IN C##eataway.Resenas.id_local%TYPE,
    p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
    p_comentario IN C##eataway.Resenas.comentario%TYPE
  );
END PCK_EATAWAY_RESENA_INSERTAR;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESENA_INSERTAR AS
  PROCEDURE InsertarResenaSP(
    p_id_usuario IN C##eataway.Resenas.id_usuario%TYPE,
    p_id_local IN C##eataway.Resenas.id_local%TYPE,
    p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
    p_comentario IN C##eataway.Resenas.comentario%TYPE
  ) AS
  BEGIN
    INSERT INTO C##eataway.Resenas (id_usuario, id_local, calificacion, comentario)
    VALUES (p_id_usuario, p_id_local, p_calificacion, p_comentario);
  END;
END PCK_EATAWAY_RESENA_INSERTAR;

--*****Paquete para Insertar Reservas*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESERVA_INSERTAR AS
  PROCEDURE InsertarReservaSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_id_local IN C##eataway.Reservas.id_local%TYPE,
    p_fecha IN C##eataway.Reservas.fecha%TYPE,
    p_hora IN C##eataway.Reservas.hora%TYPE,
    p_numero_personas IN C##eataway.Reservas.numero_personas%TYPE,
    p_descripcion IN C##eataway.Reservas.descripcion%TYPE
  );
END PCK_EATAWAY_RESERVA_INSERTAR;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESERVA_INSERTAR AS
  PROCEDURE InsertarReservaSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_id_local IN C##eataway.Reservas.id_local%TYPE,
    p_fecha IN C##eataway.Reservas.fecha%TYPE,
    p_hora IN C##eataway.Reservas.hora%TYPE,
    p_numero_personas IN C##eataway.Reservas.numero_personas%TYPE,
    p_descripcion IN C##eataway.Reservas.descripcion%TYPE
  ) AS
  BEGIN
    INSERT INTO C##eataway.Reservas (id_usuario, id_local, fecha, hora, numero_personas, descripcion)
    VALUES (p_id_usuario, p_id_local, p_fecha, p_hora, p_numero_personas, p_descripcion);
  END;
END PCK_EATAWAY_RESERVA_INSERTAR;

--*****Paquete para Obtener Reservas por Usuario*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESERVA_OBTENER AS
  PROCEDURE ObtenerReservasPorUsuarioSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_cursor OUT SYS_REFCURSOR
  );
END PCK_EATAWAY_RESERVA_OBTENER;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESERVA_OBTENER AS
  PROCEDURE ObtenerReservasPorUsuarioSP(
    p_id_usuario IN C##eataway.Reservas.id_usuario%TYPE,
    p_cursor OUT SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN p_cursor FOR
      SELECT r.id_reserva, r.id_usuario, r.id_local, r.fecha, r.hora, r.numero_personas, r.descripcion,
             l.nombre AS nombre_local
      FROM C##eataway.Reservas r
      LEFT JOIN C##eataway.Locales l ON r.id_local = l.id_local
      WHERE r.id_usuario = p_id_usuario;
  END;
END PCK_EATAWAY_RESERVA_OBTENER;

--*****Paquete para Eliminar Reservas*****-
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESERVA_ELIMINAR AS
  PROCEDURE EliminarReservaSP(
    p_id_reserva IN NUMBER
  );
END PCK_EATAWAY_RESERVA_ELIMINAR;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESERVA_ELIMINAR AS
  PROCEDURE EliminarReservaSP(
    p_id_reserva IN NUMBER
  ) AS
  BEGIN
    DELETE FROM C##eataway.Reservas
    WHERE id_reserva = p_id_reserva;
    COMMIT;
  END;
END PCK_EATAWAY_RESERVA_ELIMINAR;

--*****Paquete para obtener los locale por categoria*****--
CREATE OR REPLACE PACKAGE PCK_EATAWAY_LOCAL_OBTENER_TIPO AS
    PROCEDURE ObtenerLocalesPorTipo(
        tipoEstablecimiento IN VARCHAR2,
        localesCursor OUT SYS_REFCURSOR
    );
END PCK_EATAWAY_LOCAL_OBTENER_TIPO;

CREATE OR REPLACE PACKAGE BODY PCK_EATAWAY_LOCAL_OBTENER_TIPO AS

    PROCEDURE ObtenerLocalesPorTipo(
        tipoEstablecimiento IN VARCHAR2,
        localesCursor OUT SYS_REFCURSOR
    ) IS
    BEGIN
        OPEN localesCursor FOR
        SELECT l.id_local, l.nombre, l.id_categoria, l.descripcion, 
               c.tipo AS tipo, 
               (SELECT ruta_foto FROM Fotos f WHERE f.id_local = l.id_local AND ROWNUM = 1) AS foto,
               co.telefono, co.email, co.instagram
        FROM Locales l
        LEFT JOIN Categoria c ON l.id_categoria = c.id_categoria
        LEFT JOIN Contactos co ON l.id_local = co.id_local
        WHERE c.tipo = tipoEstablecimiento;
    END ObtenerLocalesPorTipo;

END PCK_EATAWAY_LOCAL_OBTENER_TIPO;

--*****Paquete para eliminar reseñas*****--
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESENA_ELIMINAR IS
    PROCEDURE EliminarResenaSP(p_id_resena IN NUMBER);
END PCK_EATAWAY_RESENA_ELIMINAR;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESENA_ELIMINAR IS

    PROCEDURE EliminarResenaSP(p_id_resena IN NUMBER) IS
    BEGIN
        DELETE FROM C##eataway.Resenas
        WHERE id_resena = p_id_resena;
        COMMIT;
    END EliminarResenaSP;

END PCK_EATAWAY_RESENA_ELIMINAR;

--*****Paquete para actualizar reseñas*****--
CREATE OR REPLACE PACKAGE C##eataway.PCK_EATAWAY_RESENA_ACTUALIZAR IS
    PROCEDURE ActualizarResenaSP(
        p_id_resena IN C##eataway.Resenas.id_resena%TYPE,
        p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
        p_comentario IN C##eataway.Resenas.comentario%TYPE
    );
END PCK_EATAWAY_RESENA_ACTUALIZAR;

CREATE OR REPLACE PACKAGE BODY C##eataway.PCK_EATAWAY_RESENA_ACTUALIZAR IS

    PROCEDURE ActualizarResenaSP(
        p_id_resena IN C##eataway.Resenas.id_resena%TYPE,
        p_calificacion IN C##eataway.Resenas.calificacion%TYPE,
        p_comentario IN C##eataway.Resenas.comentario%TYPE
    ) IS
    BEGIN
        UPDATE C##eataway.Resenas
        SET calificacion = p_calificacion,
            comentario = p_comentario
        WHERE id_resena = p_id_resena;
    END ActualizarResenaSP;

END PCK_EATAWAY_RESENA_ACTUALIZAR;

--*****Paquete para *****--


---------------------------------------------------
--VISTAS--
---------------------------------------------------

-- Vista de usuarios con sus reseñas y calificaciones
CREATE VIEW Vista_Usuarios_Resenas AS
SELECT u.id_usuario, u.username, u.nombre, u.primer_apellido, u.correo, r.calificacion, r.comentario
FROM Usuarios u
JOIN Resenas r ON u.id_usuario = r.id_usuario;

-- Vista de locales con sus eventos especiales
CREATE VIEW Vista_Locales_Eventos AS
SELECT l.id_local, l.nombre AS nombre_local, e.nombre_evento, e.descripcion, e.fecha_evento, e.hora_evento
FROM Locales l
JOIN EventosEspeciales e ON l.id_local = e.id_local;

-- Vista de promociones activas para cada local
CREATE VIEW Vista_Promociones_Activas AS
SELECT l.nombre AS nombre_local, p.nombre AS nombre_promocion, p.descripcion, p.fecha_inicio, p.fecha_fin
FROM Locales l
JOIN Promociones p ON l.id_local = p.id_local
WHERE p.estado = 'Activa';

-- Vista de contactos de locales
CREATE VIEW Vista_Contactos_Locales AS
SELECT l.nombre AS nombre_local, c.telefono, c.email, c.instagram
FROM Locales l
JOIN Contactos c ON l.id_local = c.id_local;

-- Vista de usuarios con sus reservas
CREATE VIEW Vista_Usuarios_Reservas AS
SELECT u.id_usuario, u.username, u.nombre, r.fecha, r.hora, r.numero_personas, r.descripcion
FROM Usuarios u
JOIN Reservas r ON u.id_usuario = r.id_usuario;

-- Vista de locales con sus reseñas y calificaciones promedio
CREATE VIEW Vista_Locales_Calificacion_Promedio AS
SELECT l.id_local, l.nombre AS nombre_local, AVG(r.calificacion) AS calificacion_promedio
FROM Locales l
JOIN Resenas r ON l.id_local = r.id_local
GROUP BY l.id_local, l.nombre;

-- Vista de fotos de locales
CREATE VIEW Vista_Fotos_Locales AS
SELECT l.id_local, l.nombre AS nombre_local, f.ruta_foto
FROM Locales l
JOIN Fotos f ON l.id_local = f.id_local;

-- Vista de ubicaciones de locales
CREATE VIEW Vista_Ubicaciones_Locales AS
SELECT l.id_local, l.nombre AS nombre_local, u.provincia, u.direccion
FROM Locales l
JOIN Ubicacion u ON l.id_local = u.id_local;

-- Vista de reservas para un local específico (ID 1)
CREATE VIEW Vista_Reservas_Local_Especifico AS
SELECT r.id_reserva, r.fecha, r.hora, r.numero_personas, r.descripcion, u.username
FROM Reservas r
JOIN Usuarios u ON r.id_usuario = u.id_usuario
WHERE r.id_local = 1;

-- Vista de detalles completos de un local
CREATE VIEW Vista_Detalles_Local AS
SELECT l.id_local, l.nombre AS nombre_local, c.tipo AS categoria, 
       con.telefono, con.email, con.instagram, 
       u.provincia, u.direccion,
       e.nombre_evento, e.fecha_evento, e.hora_evento
FROM Locales l
LEFT JOIN Categoria c ON l.id_categoria = c.id_categoria
LEFT JOIN Contactos con ON l.id_local = con.id_local
LEFT JOIN Ubicacion u ON l.id_local = u.id_local
LEFT JOIN EventosEspeciales e ON l.id_local = e.id_local;
